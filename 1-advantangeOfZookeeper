                                       zookeeper优势及运用场景
zookeeper是针对大型分布式系统的分布协调系统，管理各个节点，单一或多个节点宕掉后，依旧能保障系统稳定运行

使用场景一：一组服务器向客户端提供某种服务，我们希望客户端每次请求服务端都可以找到服务端集群中某一台服务器，这样服务端就可以向客户端提供客户端所需的服务。对于这种场景，我们的程序中一定有一份这组服务器的列表，每次客户端请求时候，都是从这份列表里读取这份服务器列表。那么这分列表显然不能存储在一台单节点的服务器上，否则这个节点挂掉了，整个集群都会发生故障，我们希望这份列表时高可用的。高可用的解决方案是：这份列表是分布式存储的，它是由存储这份列表的服务器共同管理的，如果存储列表里的某台服务器坏掉了，其他服务器马上可以替代坏掉的服务器，并且可以把坏掉的服务器从列表里删除掉，让故障服务器退出整个集群的运行，而这一切的操作又不会由故障的服务器来操作，而是集群里正常的服务器来完成。这是一种主动的分布式数据结构，能够在外部情况发生变化时候主动修改数据项状态的数据机构。Zookeeper框架提供了这种服务。这种服务名字就是：统一命名服务，它和javaEE里的JNDI服务很像

使用场景二：分布式锁服务，在做分布式运算时，保障数据操作一致性，参考CAP原理

使用场景三: 配置管理，多节点SERVER提供相同服务时，修改其中配置文件是一件危险且麻烦的事情。可以将zookeeper堪为一个高可用的配置存储器，将这些事情交给zookeeper管理。将集群的配置文件拷贝到zookeeper的文件系统某个节点上，使用zookeeper监控器分布式系统里的配置文件状态，一旦此配置文件发生变化，每台server都会受到zookeeper的通知，从而使得每台服务器同步zookeeper的配置文件，zookeeper服务保障同步服务的原子性，确保每个配置文件都能得到正确更新
使用场景四：为分布式系统提供故障修复功能，由于使用paxos算法，可以选举master（集群server数量大于等于2n+1台）

zookeeper的特点：
1、其设计采用观察值设计模式，zookeeper复制存储和管理大家关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper 就将负责通知已经在 Zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式
2、zookeeper为集群提供了一个共享存储库，集群可以从这里集中读写共享的信息，避免了每个节点的共享操作编程，减轻了分布式系统的开发难度。
3、zookeeper采用了松耦合的交互模式。这点在zookeeper提供分布式锁上表现最为明显，zookeeper可以被用作一个约会机制，让参入的进程不在了解其他进程的（或网络）的情况下能够彼此发现并进行交互，参入的各方甚至不必同时存在，只要在zookeeper留下一条消息，在该进程结束后，另外一个进程还可以读取这条信息，从而解耦了各个节点之间的关系


本篇文章参考如下网址：
http://www.cnblogs.com/sharpxiajun/archive/2013/06/02/3113923.html
